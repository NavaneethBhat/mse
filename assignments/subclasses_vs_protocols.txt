SubClasses Vs Protocols

This File explains the differences between subclasses and protocols

Subclasses: 
In objective C every object created inherits NSObject as the base class. This class includes properties and methods which is accesable to all objects. 
Such a class is divided into smaller groups of objects, called subclasses. 

Protocol: 
Protocols provide a way for classes to share the same method and property declarations without inheriting them from a common ancestor.
This features comes in very handy for objective-c for delegation pattern, on which the iOS and Mac OS SDKs rely heavily.

*--------------------------------------------------------------------------------------------------------------------*
Protocol Syntax:
*--------------------------------------------------------------------------------------------------------------------*

@protocol prot1 <NSObject> or :<NSProtocol>
//methods
@end

Implementation:

//Must import protocol file.
@interface class_name: NSObject <prot1>
{ }
//methods
@end

*----------------------------------------------------------------------------------------------------------------------*
Subclass Syntax:
*----------------------------------------------------------------------------------------------------------------------*

@interface sub_class:super_class
//methods
@end
@implementation sub_class
//definitions
@end


Protocols define the  rules or properties to be used in the inherited classes to relate two different type of objects. Absolutely no over riding. Just ike unterdfaces in java , A class must implement all methods in a protocol it declares itself as adopting.
A subclass can override a method it inherits from the class it is based on. Inherited variables and methods from super class can be modified. 

[Example from forums.macrumors.com/archive/index.php/t-1549116.html]
For example, you may have a "car" class which has properties that are common to all cars such color, tires, engine, etc. For some reason you need to differentiate between different types of cars but you don't want to repeat all those properties and behaviors in each new class so you write subclasses of the "car" class. So you may have subclasses such as "manual cars"(customised with your own functions), "automatic cars"(implementing functions told by the ascendent class).

A text field class might have a delegate that implements an informal protocol with an optional method for performing auto-completion of user-typed text. The text field discovers whether the delegate implements that method (via reflection) and, if so, calls the delegate's method to support the auto-complete feature.

New Terms used.
delegate:
A delegate is an object that acts on behalf of, or in coordination with, another object when that object encounters an event in a program. 
Reflection:
In computer science, reflection is the ability of a computer program to examine and modify the structure and behavior (specifically the values,meta-data, properties and functions) of an object at runtime.
